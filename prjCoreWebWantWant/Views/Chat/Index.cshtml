
@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Member/LayoutForMem.cshtml";

}

<div class="container">

<div class="chat-row my-5" style="height:69vh">
    
        <div class="col-md-3  card">
            <div class="chat-list-header pt-3" style="height:100px">
                <span class="h4 text-white">◆◆◆Want Chat◆◆◆</span>
                <span class="input-group my-2 w-75 mx-auto">
                <input type="text" placeholder="Search 暫定功能" class="form-control" autocomplete="off" name="searchUser" tabindex="101" value="">
                <button tabindex="102" class="input-group-text" type="submit" value=""><i class="bi bi-search-heart"></i></button>
                </span>
            </div>
            <div id ="userList" style="max-height: 69vh; overflow-y: auto;"></div><!--聊天清單從這邊開始加的-->
        </div>
        <div class="col-md-9 card" style="height:80vh">
            <div class="chat-list-header pt-3 opacity-50" style="min-height:100px"></div>
            <div class="p-3" id="chatDetail" style="height:100vh;">請選擇聊天對象以開始對話</div><!--聊天詳細頁面是這邊-->
            <span class="input-group">
            <input type="text" placeholder="Input some words..." class="form-control" autocomplete="off" name="jsSendMessage" tabindex="101" value="">
            <button tabindex="102" class="input-group-text" type="submit" id="btnSentMessage"><i class="bi bi-send"></i></button>
        </span>
    </div>
</div>

</div>


@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.10/signalr.min.js"></script> @* 這個要在連線建立前加入 *@


    <script>
        //建立signalR連線
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat") // 填寫Hub端點URL
            .build();

        async function start() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        connection.onclose(async () => {
            await start();
        });

        // Start the connection.
        start();

        //聊天發出功能
        const btnSentMessage = document.getElementById("btnSentMessage");
        const messageInput = document.querySelector("input[name='jsSendMessage']");
        let receiverId = 0;

        btnSentMessage.addEventListener('click', () => {
            const message = messageInput.value; // 取得使用者輸入的訊息
            const senderId = @Html.Raw(Json.Serialize(ViewBag.currentLoginId));
            if (message.trim() !== "") {
                // 呼叫 SendPrivateMessage 方法傳送訊息
                connection.invoke('SendPrivateMessage', parseInt(senderId), parseInt(receiverId), message).catch(err => console.error(err));

            }
        })


        //這邊是左方聊天對象
        const userList = document.querySelector('#userList');
        async function loadUser() {
            const response = await fetch('@Url.Content("~/ChatApi/UserList/")');
            const data = await response.json();
            let chatAvaterUrl=[];//存聊天對象頭像備用
            let chatAvaCount=0;

            const user = data.map(u =>{//抓左邊聊天對象列表的map
                const messageTime = new Date(u.latestMessage.created);//這個是以毫秒為單位
                const nowTime=new Date();
                const timeGap = nowTime - messageTime;
                const messageDate = messageTime.getDate();
                const currentDate = nowTime.getDate();

                let timeDisplay;
                if (currentDate === messageDate) 
                {
                    const options = { hour: 'numeric', minute: 'numeric', hour12: false };//24H制
                    timeDisplay = messageTime.toLocaleTimeString(undefined, options);
                }
                else if (timeGap < 1 * 24 * 60 * 60 * 1000) //24H*60M*60S 一天內但已經換日
                {
                    const options = { hour: 'numeric', minute: 'numeric', hour12: false };
                    timeDisplay = '昨天'+messageTime.toLocaleTimeString(undefined,options);
                }
                else if (timeGap < 3 * 24 * 60 * 60 * 1000) //三天內
                {
                    const days = Math.floor(timeGap / (24 * 60 * 60 * 1000));
                    timeDisplay = `${days} 天前`
                }
                else {//超過三天
                    const options = { month: 'numeric', day: 'numeric' };
                    timeDisplay = messageTime.toLocaleDateString(undefined, options);
                }


                chatAvaterUrl.push(`data:image/jpeg;base64,${u.memberPhoto}`);//存路徑
                const chatLink=document.createElement('a');//自動生成的a標籤
                chatLink.href='#';
                chatLink.classList.add('chatLink', 'link-underline', 'link-underline-opacity-0');
                chatLink.setAttribute('inChatWithId', u.accountId);//與誰聊天
                chatLink.setAttribute('inPage', '1');//設定讀取第幾頁，因為要讀最新的所以都是設定1
                chatLink.setAttribute('data-index', chatAvaCount);//儲存頭像的Index
                chatLink.innerHTML = //裡面包的html
                    `<div class="chat-list-group list-group-flush d-flex align-items-center p-3" style="height:100px" id=${chatAvaCount} onclick="toggleBackgroundColor(this)">
                                <img src="${chatAvaterUrl[chatAvaCount]}" class="rounded-circle img-thumbnail user-image col-2 ">
                         <div class="col-10 mx-2">
                                      <span class="">${u.name}</span> <span class="small float-end">${timeDisplay}</span>
                              </br>
                              <span class="small">${u.latestMessage.message}</span>
                           </div>
                 </div>`;
                chatAvaCount++;

                //點下聊天對象監聽器(到右邊聊天詳細)
                chatLink.addEventListener('click', async (event) => {
                    event.preventDefault();//防止連結預設的#
                    const clickedElement = event.currentTarget;//要找到使用者按下了誰
                    const index =clickedElement.getAttribute('data-index');//抓取按下的那個index值

                    const jsChatWithId = chatLink.getAttribute('inChatWithId')
                    receiverId = chatLink.getAttribute('inChatWithId')
                    console.log(receiverId)
                    const jsPage = chatLink.getAttribute('inPage');
                    const currentLoginId = @Html.Raw(Json.Serialize(ViewBag.currentLoginId));
                    const response = await fetch(`@Url.Content("~/ChatApi/ChatDetail")?chatWithId=${jsChatWithId}&page=${jsPage}`);

                    const chatDetailData = await response.json();

                    const chatDetailDiv = document.querySelector('#chatDetail');
                    chatDetailDiv.innerHTML = ''; // 清空原內容
                    chatDetailData.map(chat => {

                        const chatContainer = document.createElement('div');
                        chatContainer.classList.add('chat-container');

                        let chatAvatar = document.createElement('img');
                        chatAvatar.src = chatAvaterUrl[index];//指定頭像路徑

                        const chatMessage = document.createElement('span');//對話
                        chatMessage.textContent = chat.message;//對話文字
                        chatMessage.classList.add('chat-message');

                        const messageTimeEle = document.createElement('span');
                        const messageTime = new Date(chat.created);
                        const options = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false };
                        messageTimeEle.textContent = messageTime.toLocaleString(undefined, options);
                        messageTimeEle.classList.add('message-time', 'small', 'go-right', 'font-color-grey');

                        const brElement = document.createElement('br');

                        if (chat.receiverId === currentLoginId) {
                            chatMessage.classList.add('message-left', 'chat-bubble', 'go-left');//訊息樣式
                            chatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-left');
                            messageTimeEle.classList.add('message-time', 'small', 'go-left');
                            chatMessage.appendChild(brElement);
                            chatMessage.appendChild(messageTimeEle);//加入對話時間
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(chatMessage);//加入對話

                        } else {
                            chatAvatar.src = @Html.Raw(Json.Serialize(ViewBag.currentLoginAvatarUrl));
                            chatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-right');
                            chatMessage.classList.add('message-right', 'chat-bubble', 'go-right');
                            messageTimeEle.classList.add('message-time', 'small', 'go-right');
                            chatMessage.appendChild(brElement);
                            chatMessage.appendChild(messageTimeEle);//加入對話時間
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(chatMessage);//加入對話
                        }
                        chatDetailDiv.appendChild(chatContainer);
                    })
                })

                userList.appendChild(chatLink);
            
            })
        }

            loadUser();


        function toggleBackgroundColor(element) {
            element.classList.add('active');
            for (const ta of document.getElementsByClassName('chat-list-group')){
                if (ta.id !== element.id){
                    ta.classList.remove('active');
                }
            }
        }


    </script>

}


@section Styles{
    <style>
        ::-webkit-scrollbar { /* 調整捲軸寬度 */
            width: 7px;
        }

        ::-webkit-scrollbar-thumb { /* 調整捲軸拉把部分 */
            background: #f1f1f1;
            border-radius: 7px;
        }

        ::-webkit-scrollbar-track { /* 調整捲軸滑軌部分 */
            background: #fff;
            border-radius: 7px;
        }

        .chat-list-header{
            background-color: #c5d5e2;
            text-align:center;
        }

        .chat-row{
            display: flex;
            flex-wrap: wrap;
            padding-right: calc(var(--bs-gutter-x) * 0.5);
            padding-left: calc(var(--bs-gutter-x) * 0.5);
        }

        .chat-list-group{
            color:#777777;
            border-bottom: 1px solid #f1f1f1;
            position: relative;
            overflow: hidden;
        }

            .chat-list-group::before,
            .chat-list-group::after
             {
                content: "";
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 1px;
                background-color: #a7bed2; /* 直線的顏色 */
                transform: scaleX(0); /* 初始時不顯示，使用 scaleX(1) 來顯示 */
                transition: transform 0.6s ease; /* 動畫過渡效果 */
            }

            .chat-list-group::before {
                top: 0; /* 將頂部線元素定位在頂部 */
                transform-origin: right;
            }

            .chat-list-group::after {
                bottom: 0; /* 將底部線元素定位在底部 */
                transform-origin: left;
            }


            .chat-list-group:hover::after,
            .chat-list-group:hover::before {
                transform: scaleX(1); /* 滑鼠懸停時顯示直線 */
            }


            .chat-list-group:hover {
                background-color: #f8fbfd;
        }

       .chat-list-group.active {
                background-color: #f6f9fc;
                border-left: 1px dotted #a7bed2;
            }



        .user-image {
            max-width: 50px; /* 最大寬度 */
            max-height: 50px; /* 最大高度 */
        }

        .chat-bubble {
            border-radius: 5px;
            display: inline-block;
            padding: 10px 18px;
            position: relative;
            margin: 10px;
            min-width: 400px;
        }

        .go-left {
            float: left;
        }

        .go-right {
            float: right;
        }

        .message-left {
            background: #e2e2e2;
            border-radius: .4em;
            width: 200px;
        }

            .message-left::after {
                content: '';
                position: absolute;
                left: 0;
                top: 50%;
                width: 0;
                height: 0;
                border: 10px solid transparent;
                border-right-color: #e2e2e2;
                border-left: 0;
                border-bottom: 0;
                margin-top: -5px;
                margin-left: -10px;
            }

        .message-right {
            background: #d4ecf4;
            border-radius: .4em;
            width: 200px;
        }

            .message-right::after {
                content: '';
                position: absolute;
                right: 0;
                top: 50%;
                width: 0;
                height: 0;
                float: right;
                border: 10px solid transparent;
                border-left-color: #d4ecf4;
                border-right: 0;
                border-bottom: 0;
                margin-top: -5px;
                margin-right: -10px;
            }

        .chat-avatar {
            width: 50px; /* 設定頭像寬度 */
            height: 50px; /* 設定頭像高度 */
            margin-right: 10px; /* 設定頭像和聊天訊息之間的間距 */
            margin-left: 10px; /* 設定頭像和聊天訊息之間的間距 */
            border-radius: 50%; /* 設定頭像為圓形 */
        }

        .chat-container {
            margin-bottom: 20px; /* 設定訊息之間的間距 */
            overflow-y: auto;
        }

        .chat-message {
            max-width: 400px;
            min-width: 250px;
        }

        #chatDetail {
            width: 100%;
            overflow-y: auto;
        }

        .border-tb{
            border: 1px solid #EEEEEE;
        }

        .font-color-grey {
            color: #b4b4b4;
        }
    </style>
}