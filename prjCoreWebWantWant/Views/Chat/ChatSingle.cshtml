@* 使用方式:網址列要產生https://localhost:7042/chat/ChatSingle?id=28 ***重點在?id=OOO這邊 *@


@{
    ViewData["Title"] = "聊聊";
    
    NewIspanProjectContext _db = new NewIspanProjectContext();
    CChatFactory chatFactory = new CChatFactory(_db);
}

<div class="container">
        <div class="col-md-9 card" style="height:80vh;flex-grow: 100;">
        <div class="chat-list-header pt-3 align-middle" style="min-height:100px" id="chatWithWho"></div>
            <div class="p-3" id="chatDetail" style="height:100vh"></div><!--聊天詳細頁面是這邊-->
            <span class="input-group">
                <input type="text" placeholder="Input some words..." class="form-control" autocomplete="off" name="jsSendMessage" tabindex="101" value="">
                <button tabindex="102" class="input-group-text" type="submit" id="btnSentMessage"><i class="bi bi-send"></i></button>
            </span>
        </div>
    </div>



@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.10/signalr.min.js"></script> @* 這個要在連線建立前加入 *@


    <script>
        //固定的參數
        const senderId = @Html.Raw(Json.Serialize(ViewBag.currentLoginId));
        const receiverId = @Html.Raw(Json.Serialize(ViewBag.chatWithId));

        //建立signalR連線
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat") // 填寫Hub端點URL 這邊要跟program.cs寫得一模一樣，要不然不會抓到app.MapHub<ChatHub>("/hubs/chat");
            .build();

        connection.start().then(() => {
            const connectionId = connection.connectionId;
            console.log("SignalR Connected. Connection ID: " + connectionId);
            // 呼叫後端的 UpdateUserInfo 方法，傳遞 accountId 和 connectionId
            connection.invoke('UpdateUserInfo', senderId, connectionId);
        }).catch(err => { console.error(err); setTimeout(start, 5000); });

        connection.on("ReceiveMessage", function (senderId, receiverId, message, messageTimestamp) {
            console.log("這裡是ReceiveMessage，你接收到訊息會在下面印出:");
            console.log("訊息" + message);
            console.log("receiverId" + receiverId);
            console.log("senderId" + senderId);
            console.log(messageTimestamp);
            ImReciver(senderId, receiverId, message, messageTimestamp);
            keepDown();
           
        });

        connection.on("UpdateUserInfo", function (accountId, connectionId) {
            console.log("這裡是UpdateUserInfo，更新使用者清單時會看到我喔");
        });

        //聊天發出功能--------------------start--------------------
        const btnSentMessage = document.getElementById("btnSentMessage");
        const messageInput = document.querySelector("input[name='jsSendMessage']");

        btnSentMessage.addEventListener('click', () => {//按下畫面上按鈕的事件
            const message = messageInput.value; // 取得使用者輸入的訊息
            if (message.trim() !== "") {//如果message移除空白後也不為空的話
                // 呼叫 SendPrivateMessage 方法傳送訊息
                connection.invoke('SendPrivateMessage', parseInt(senderId), parseInt(receiverId), message).catch(err => console.error(err)).then(() => {
                    messageInput.value = ''; // 清空輸入框
                        console.log("監看傳訊有沒有成功btn");
                        const messageTimestamp = Date.now();
                        ImSender(senderId, receiverId, message, messageTimestamp);
                        keepDown();
                });
            }
        })

        messageInput.addEventListener('keydown', (event) => {//在messageInput按下enter的事件
            if (event.key === 'Enter') { // 如果按下的是 Enter 鍵
                event.preventDefault(); // 防止預設行為（換行）

                const message = messageInput.value.trim(); // 取得使用者輸入的訊息，並移除前後空白
                if (message !== "") {
                    // 呼叫 SendPrivateMessage 方法傳送訊息
                    connection.invoke('SendPrivateMessage', parseInt(senderId), parseInt(receiverId), message).catch(err => console.error(err)).then(() => {
                        messageInput.value = ''; // 清空輸入框
                            console.log("監看傳訊有沒有成功enter");
                            const messageTimestamp = Date.now();
                            ImSender(senderId, receiverId, message, messageTimestamp);
                            keepDown();
                    });
                }
            }
        });
        //聊天發出功能--------------------end--------------------

        //即時加入訊息到HTML-----------這裡是接收用
        function ImReciver(senderId, receiverId, message, messageTimestamp) {
            const chatDetailDiv = document.querySelector('#chatDetail');//放到chatDetailDiv
            const chatContainer = document.createElement('div');//創一個DIV
            chatContainer.classList.add('chat-container', 'flex', 'flex-row-reverse');//把div加樣式

            const chatMessage = document.createElement('span');//對話
            chatMessage.textContent = message;//對話文字
            chatMessage.classList.add('chat-message');

            const messageTimeEle = document.createElement('span');
            const messageTime = new Date(messageTimestamp);
            const options = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false };
            messageTimeEle.textContent = messageTime.toLocaleString(undefined, options);
            messageTimeEle.classList.add('message-time', 'small', 'go-right', 'font-color-grey');

            const brElement = document.createElement('br');

            const addChatAvatar = document.createElement('img');//這個給接收訊息時的對方頭像用
            addChatAvatar.src = @Html.Raw(Json.Serialize(ViewBag.chatWithUserAvatarUrl));

            chatMessage.classList.add('message-left', 'chat-bubble', 'go-left');//訊息樣式
            addChatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-left');
            messageTimeEle.classList.add('message-time', 'small', 'go-left');
            chatMessage.appendChild(brElement);
            chatMessage.appendChild(messageTimeEle);//加入對話時間
            chatContainer.appendChild(addChatAvatar);//加入頭像
            chatContainer.appendChild(chatMessage);//加入對話
            console.log(addChatAvatar)

            chatDetailDiv.append(chatContainer);
        }
        //即時加入訊息到HTML-----------接收結束-----------------------------------------

        //即時加入訊息到HTML-----------這裡是傳訊用
        function ImSender(senderId, receiverId, message, messageTimestamp) {
            const chatDetailDiv = document.querySelector('#chatDetail');//放到chatDetailDiv
            const chatContainer = document.createElement('div');//創一個DIV
            chatContainer.classList.add('chat-container', 'flex', 'flex-row-reverse');//把div加樣式

            const chatMessage = document.createElement('span');//對話
            chatMessage.textContent = message;//對話文字
            chatMessage.classList.add('chat-message');

            const messageTimeEle = document.createElement('span');
            const messageTime = new Date(messageTimestamp);
            const options = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false };
            messageTimeEle.textContent = messageTime.toLocaleString(undefined, options);
            messageTimeEle.classList.add('message-time', 'small', 'go-right', 'font-color-grey');

            const brElement = document.createElement('br');

            const addChatAvatar = document.createElement('img');//這個給接收訊息時的對方頭像用
            addChatAvatar.src = @Html.Raw(Json.Serialize(ViewBag.currentLoginAvatarUrl));
            addChatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-right');
            chatMessage.classList.add('message-right', 'chat-bubble', 'go-right');
            messageTimeEle.classList.add('message-time', 'small', 'go-right');
            chatMessage.appendChild(brElement);
            chatMessage.appendChild(messageTimeEle);//加入對話時間
            chatContainer.appendChild(addChatAvatar);//加入頭像
            chatContainer.appendChild(chatMessage);//加入對話

            chatDetailDiv.append(chatContainer);
        }

        //即時加入訊息到HTML-----------傳訊結束-----------------------------------------

        //聊天室預設捲軸在最下方--------------------start--------------------
        function keepDown() {
            const chatDetailDiv = document.querySelector('#chatDetail');
            chatDetailDiv.scrollTop = chatDetailDiv.scrollHeight;
        }

        //聊天室預設捲軸在最下方--------------------end--------------------

        
                //聊天詳細--------------------start--------------------
                async function chatWith(){
                    const chatWithWho = document.querySelector('#chatWithWho');//標示與誰對話中
                    const chatWithUserName = document.createElement('div');//創一個DIV
                    const getUserName = @Html.Raw(Json.Serialize(ViewBag.chatWithName));
                    const iconAndText =
                `<div class="d-flex flex-row">
                            <div class="align-self-center">
                                        <img src="@chatFactory.UserAvatar(ViewBag.chatWithId)" class="chat-avatar m-auto">
                 </div>
                            <div class="align-self-center ms-3">
                                <div class="my-h2">${getUserName}</div>
                        <div class="small">@chatFactory.GetUserName(ViewBag.chatWithId)</div>
                    </div>
                </div>`
                    chatWithUserName.innerHTML = iconAndText;
                    chatWithUserName.classList.add('text-start', 'ms-3');//把div加樣式
                    chatWithWho.appendChild(chatWithUserName)
                    
        
                    let jsPage = 1;
                    const currentLoginId = @Html.Raw(Json.Serialize(ViewBag.currentLoginId));
                    const response = await fetch(`@Url.Content("~/ChatApi/ChatDetail")?chatWithId=${receiverId}&page=${jsPage}`);
                    const chatDetailData = await response.json();

                    const chatDetailDiv = document.querySelector('#chatDetail');
                    chatDetailDiv.innerHTML = ''; // 清空原內容
                    chatDetailData.map(chat => {

                        const chatContainer = document.createElement('div');
                        chatContainer.classList.add('chat-container', 'flex', 'flex-row-reverse');

                        let chatAvatar = document.createElement('img');
                        chatAvatar.src = @Html.Raw(Json.Serialize(ViewBag.chatWithUserAvatarUrl));//對象頭像

                        const chatMessage = document.createElement('span');//對話
                        chatMessage.textContent = chat.message;//對話文字
                        chatMessage.classList.add('chat-message');

                        const messageTimeEle = document.createElement('span');
                        const messageTime = new Date(chat.created);
                        const options = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false };
                        messageTimeEle.textContent = messageTime.toLocaleString(undefined, options);
                        messageTimeEle.classList.add('message-time', 'small', 'go-right', 'font-color-grey');

                        const brElement = document.createElement('br');

                        if (chat.receiverId === currentLoginId) {
                            chatMessage.classList.add('message-left', 'chat-bubble', 'go-left');//訊息樣式
                            chatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-left');
                            messageTimeEle.classList.add('message-time', 'small', 'go-left');
                            chatMessage.appendChild(brElement);
                            chatMessage.appendChild(messageTimeEle);//加入對話時間
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(chatMessage);//加入對話

                        } else {
                            chatAvatar.src = @Html.Raw(Json.Serialize(ViewBag.currentLoginAvatarUrl));
                            chatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-right');
                            chatMessage.classList.add('message-right', 'chat-bubble', 'go-right');
                            messageTimeEle.classList.add('message-time', 'small', 'go-right');
                            chatMessage.appendChild(brElement);
                            chatMessage.appendChild(messageTimeEle);//加入對話時間
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(chatMessage);//加入對話
                        }
                        chatDetailDiv.appendChild(chatContainer);
                    })
                    keepDown();
                }

        
        //聊天詳細--------------------end--------------------

        //抓網址列參數------------------------------------------
        function getQueryParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }
        chatWith()

    </script>

}


@section Styles{
    <style>
        ::-webkit-scrollbar { /* 調整捲軸寬度 */
            width: 7px;
        }

        ::-webkit-scrollbar-thumb { /* 調整捲軸拉把部分 */
            background: #f1f1f1;
            border-radius: 7px;
        }

        ::-webkit-scrollbar-track { /* 調整捲軸滑軌部分 */
            background: #fff;
            border-radius: 7px;
        }

        .chat-list-header {
            background-color: #c5d5e2;
            text-align: center;
        }

        .chat-row {
            display: flex;
            flex-wrap: wrap;
            padding-right: calc(var(--bs-gutter-x) * 0.5);
            padding-left: calc(var(--bs-gutter-x) * 0.5);
        }

        .chat-list-group {
            color: #777777;
            border-bottom: 1px solid #f1f1f1;
            position: relative;
            overflow: hidden;
        }

            .chat-list-group::before,
            .chat-list-group::after {
                content: "";
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 1px;
                background-color: #a7bed2; /* 直線的顏色 */
                transform: scaleX(0); /* 初始時不顯示，使用 scaleX(1) 來顯示 */
                transition: transform 0.6s ease; /* 動畫過渡效果 */
            }

            .chat-list-group::before {
                top: 0; /* 將頂部線元素定位在頂部 */
                transform-origin: right;
            }

            .chat-list-group::after {
                bottom: 0; /* 將底部線元素定位在底部 */
                transform-origin: left;
            }


            .chat-list-group:hover::after,
            .chat-list-group:hover::before {
                transform: scaleX(1); /* 滑鼠懸停時顯示直線 */
            }


            .chat-list-group:hover {
                background-color: #f8fbfd;
            }

            .chat-list-group.active {
                background-color: #f6f9fc;
                border-left: 1px dotted #a7bed2;
            }



        .user-image {
            max-width: 50px; /* 最大寬度 */
            max-height: 50px; /* 最大高度 */
        }

        .chat-bubble {
            border-radius: 5px;
            display: inline-block;
            padding: 10px 18px;
            position: relative;
            margin: 10px;
            min-width: 400px;
        }

        .go-left {
            float: left;
        }

        .go-right {
            float: right;
        }

        .message-left {
            background: #e2e2e2;
            border-radius: .4em;
            width: 200px;
        }

            .message-left::after {
                content: '';
                position: absolute;
                left: 0;
                top: 50%;
                width: 0;
                height: 0;
                border: 12px solid transparent;
                border-right-color: #e2e2e2;
                border-left: 0;
                border-bottom: 0;
                margin-top: -5px;
                margin-left: -10px;
            }

        .message-right {
            background: #d4ecf4;
            border-radius: .4em;
            width: 200px;
        }

            .message-right::after {
                content: '';
                position: absolute;
                right: 0;
                top: 50%;
                width: 0;
                height: 0;
                float: right;
                border: 12px solid transparent;
                border-left-color: #d4ecf4;
                border-right: 0;
                border-bottom: 0;
                margin-top: -5px;
                margin-right: -10px;
            }

        .chat-avatar {
            width: 50px; /* 設定頭像寬度 */
            min-width: 50px; /* 設定頭像寬度 */
            height: 50px; /* 設定頭像高度 */
            min-height: 50px; /* 設定頭像高度 */
            margin-right: 10px; /* 設定頭像和聊天訊息之間的間距 */
            margin-left: 5px; /* 設定頭像和聊天訊息之間的間距 */
            margin-top: 25px; /* 設定頭像和聊天訊息之間的間距 */
            border-radius: 50%; /* 設定頭像為圓形 */
        }

        .chat-container {
            margin-bottom: 20px; /* 設定訊息之間的間距 */
            overflow-y: auto;
        }

        .chat-message {
            max-width: 400px;
            min-width: 250px;
        }

        #chatDetail {
            width: 100%;
            overflow-y: auto;
        }

        .border-tb {
            border: 1px solid #EEEEEE;
        }

        .font-color-grey {
            color: #b4b4b4;
        }

        .my-h2{
            color: #000;
            font-size:1.5em;
        }

        .gardbg{
            /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#e0f0f9+0,a9d2f3+12,90bae4+21,6ba8e5+33,a2daf5+52,e3f8fc+81,c3f0f7+100 */
            background: #e0f0f9; /* Old browsers */
            background: -moz-linear-gradient(-45deg, #e0f0f9 0%, #a9d2f3 12%, #90bae4 21%, #6ba8e5 33%, #a2daf5 52%, #e3f8fc 81%, #c3f0f7 100%); /* FF3.6-15 */
            background: -webkit-linear-gradient(-45deg, #e0f0f9 0%,#a9d2f3 12%,#90bae4 21%,#6ba8e5 33%,#a2daf5 52%,#e3f8fc 81%,#c3f0f7 100%); /* Chrome10-25,Safari5.1-6 */
            background: linear-gradient(135deg, #e0f0f9 0%,#a9d2f3 12%,#90bae4 21%,#6ba8e5 33%,#a2daf5 52%,#e3f8fc 81%,#c3f0f7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#e0f0f9', endColorstr='#c3f0f7',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
            -webkit-background-clip: text;
            color: transparent;
        }
    </style>
}