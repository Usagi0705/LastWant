@* 使用方式:網址列要產生https://localhost:7042/chat/ChatSingle?id=28 ***重點在?id=OOO這邊 *@

<div class="container">
        <div class="col-md-9 card" style="height:80vh;flex-grow: 100;">
            <div class="chat-list-header pt-3 opacity-50" style="min-height:100px"></div>
            <div class="p-3" id="chatDetail" style="height:100vh"></div><!--聊天詳細頁面是這邊-->
            <span class="input-group">
                <input type="text" placeholder="Input some words..." class="form-control" autocomplete="off" name="jsSendMessage" tabindex="101" value="">
                <button tabindex="102" class="input-group-text" type="submit" id="btnSentMessage"><i class="bi bi-send"></i></button>
            </span>
        </div>
    </div>



@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.10/signalr.min.js"></script> @* 這個要在連線建立前加入 *@


    <script>
        //建立signalR連線
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat") // 填寫Hub端點URL 這邊要跟program.cs寫得一模一樣，要不然不會抓到app.MapHub<ChatHub>("/hubs/chat");
            .build();

        connection.start().then(() => {
            console.log("SignalR Connected.")
        }).catch(err => { console.error(err); setTimeout(start, 5000); });

        connection.on("ReceiveMessage", function (senderId, message) {
            console.log("到底有沒有跑到這");

            console.log(message);
            console.log(senderId);
            // 處理訊息的顯示等操作
        });

        //聊天發出功能--------------------start--------------------
        const btnSentMessage = document.getElementById("btnSentMessage");
        const messageInput = document.querySelector("input[name='jsSendMessage']");
        const jsChatWithId = getQueryParam('id');
        const currentLoginId = @Html.Raw(Json.Serialize(ViewBag.currentLoginId));
        console.log(jsChatWithId)

        btnSentMessage.addEventListener('click', () => {//按下畫面上按鈕的事件
            let receiverId = jsChatWithId;
            console.log(receiverId)
            const message = messageInput.value; // 取得使用者輸入的訊息
            const senderId = currentLoginId;
            if (message.trim() !== "") {//如果message移除空白後也不為空的話
                // 呼叫 SendPrivateMessage 方法傳送訊息
                connection.invoke('SendPrivateMessage', parseInt(senderId), parseInt(receiverId), message).catch(err => console.error(err)).then(() => {
                    messageInput.value = '';
                    keepDown();
                });
            }
        })

        messageInput.addEventListener('keydown', (event) => {//在messageInput按下enter的事件
            if (event.key === 'Enter') { // 如果按下的是 Enter 鍵
                event.preventDefault(); // 防止預設行為（換行）
                let receiverId = jsChatWithId;
                console.log(receiverId)
                const message = messageInput.value.trim(); // 取得使用者輸入的訊息，並移除前後空白
                const senderId = currentLoginId;

                if (message !== "") {
                    // 呼叫 SendPrivateMessage 方法傳送訊息
                    connection.invoke('SendPrivateMessage', parseInt(senderId), parseInt(receiverId), message).catch(err => console.error(err)).then(() => {
                        messageInput.value = ''; // 清空輸入框
                        keepDown();
                    });
                }
            }
        });
        //聊天發出功能--------------------end--------------------

        //聊天室預設捲軸在最下方--------------------start--------------------
        function keepDown() {
            const chatDetailDiv = document.querySelector('#chatDetail');
            chatDetailDiv.scrollTop = chatDetailDiv.scrollHeight;
        }

        //聊天室預設捲軸在最下方--------------------end--------------------

        
                //聊天詳細--------------------start--------------------
                async function chatWith(event){
                    const jsPage = chatLink.getAttribute('inPage');
                    const currentLoginId = @Html.Raw(Json.Serialize(ViewBag.currentLoginId));
                    const response = await fetch(`@Url.Content("~/ChatApi/ChatDetail")?chatWithId=${jsChatWithId}&page=${jsPage}`);

                    const chatDetailData = await response.json();

                    const chatDetailDiv = document.querySelector('#chatDetail');
                    chatDetailDiv.innerHTML = ''; // 清空原內容
                    chatDetailData.map(chat => {

                        const chatContainer = document.createElement('div');
                        chatContainer.classList.add('chat-container', 'flex', 'flex-row-reverse');

                        let chatAvatar = document.createElement('img');
                        chatAvatar.src = chatAvaterUrl[index];//指定頭像路徑

                        const chatMessage = document.createElement('span');//對話
                        chatMessage.textContent = chat.message;//對話文字
                        chatMessage.classList.add('chat-message');

                        const messageTimeEle = document.createElement('span');
                        const messageTime = new Date(chat.created);
                        const options = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false };
                        messageTimeEle.textContent = messageTime.toLocaleString(undefined, options);
                        messageTimeEle.classList.add('message-time', 'small', 'go-right', 'font-color-grey');

                        const brElement = document.createElement('br');

                        if (chat.receiverId === currentLoginId) {
                            chatMessage.classList.add('message-left', 'chat-bubble', 'go-left');//訊息樣式
                            chatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-left');
                            messageTimeEle.classList.add('message-time', 'small', 'go-left');
                            chatMessage.appendChild(brElement);
                            chatMessage.appendChild(messageTimeEle);//加入對話時間
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(chatMessage);//加入對話

                        } else {
                            chatAvatar.src = @Html.Raw(Json.Serialize(ViewBag.currentLoginAvatarUrl));
                            chatAvatar.classList.add('chat-avatar', 'chat-avatar', 'go-right');
                            chatMessage.classList.add('message-right', 'chat-bubble', 'go-right');
                            messageTimeEle.classList.add('message-time', 'small', 'go-right');
                            chatMessage.appendChild(brElement);
                            chatMessage.appendChild(messageTimeEle);//加入對話時間
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(chatMessage);//加入對話
                        }
                        chatDetailDiv.appendChild(chatContainer);
                    })
                    keepDown();
                }

        
        //聊天詳細--------------------end--------------------

        //抓網址列參數------------------------------------------
        function getQueryParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }


    </script>

}


@section Styles{
    <style>
        ::-webkit-scrollbar { /* 調整捲軸寬度 */
            width: 7px;
        }

        ::-webkit-scrollbar-thumb { /* 調整捲軸拉把部分 */
            background: #f1f1f1;
            border-radius: 7px;
        }

        ::-webkit-scrollbar-track { /* 調整捲軸滑軌部分 */
            background: #fff;
            border-radius: 7px;
        }

        .chat-list-header {
            background-color: #c5d5e2;
            text-align: center;
        }

        .chat-row {
            display: flex;
            flex-wrap: wrap;
            padding-right: calc(var(--bs-gutter-x) * 0.5);
            padding-left: calc(var(--bs-gutter-x) * 0.5);
        }

        .chat-list-group {
            color: #777777;
            border-bottom: 1px solid #f1f1f1;
            position: relative;
            overflow: hidden;
        }

            .chat-list-group::before,
            .chat-list-group::after {
                content: "";
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 1px;
                background-color: #a7bed2; /* 直線的顏色 */
                transform: scaleX(0); /* 初始時不顯示，使用 scaleX(1) 來顯示 */
                transition: transform 0.6s ease; /* 動畫過渡效果 */
            }

            .chat-list-group::before {
                top: 0; /* 將頂部線元素定位在頂部 */
                transform-origin: right;
            }

            .chat-list-group::after {
                bottom: 0; /* 將底部線元素定位在底部 */
                transform-origin: left;
            }


            .chat-list-group:hover::after,
            .chat-list-group:hover::before {
                transform: scaleX(1); /* 滑鼠懸停時顯示直線 */
            }


            .chat-list-group:hover {
                background-color: #f8fbfd;
            }

            .chat-list-group.active {
                background-color: #f6f9fc;
                border-left: 1px dotted #a7bed2;
            }



        .user-image {
            max-width: 50px; /* 最大寬度 */
            max-height: 50px; /* 最大高度 */
        }

        .chat-bubble {
            border-radius: 5px;
            display: inline-block;
            padding: 10px 18px;
            position: relative;
            margin: 10px;
            min-width: 400px;
        }

        .go-left {
            float: left;
        }

        .go-right {
            float: right;
        }

        .message-left {
            background: #e2e2e2;
            border-radius: .4em;
            width: 200px;
        }

            .message-left::after {
                content: '';
                position: absolute;
                left: 0;
                top: 50%;
                width: 0;
                height: 0;
                border: 10px solid transparent;
                border-right-color: #e2e2e2;
                border-left: 0;
                border-bottom: 0;
                margin-top: -5px;
                margin-left: -10px;
            }

        .message-right {
            background: #d4ecf4;
            border-radius: .4em;
            width: 200px;
        }

            .message-right::after {
                content: '';
                position: absolute;
                right: 0;
                top: 50%;
                width: 0;
                height: 0;
                float: right;
                border: 10px solid transparent;
                border-left-color: #d4ecf4;
                border-right: 0;
                border-bottom: 0;
                margin-top: -5px;
                margin-right: -10px;
            }

        .chat-avatar {
            width: 50px; /* 設定頭像寬度 */
            height: 50px; /* 設定頭像高度 */
            margin-right: 10px; /* 設定頭像和聊天訊息之間的間距 */
            margin-left: 10px; /* 設定頭像和聊天訊息之間的間距 */
            border-radius: 50%; /* 設定頭像為圓形 */
        }

        .chat-container {
            margin-bottom: 20px; /* 設定訊息之間的間距 */
            overflow-y: auto;
        }

        .chat-message {
            max-width: 400px;
            min-width: 250px;
        }

        #chatDetail {
            width: 100%;
            overflow-y: auto;
        }

        .border-tb {
            border: 1px solid #EEEEEE;
        }

        .font-color-grey {
            color: #b4b4b4;
        }
    </style>
}