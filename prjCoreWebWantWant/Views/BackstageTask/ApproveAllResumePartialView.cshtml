@model IEnumerable<WantTask.ViewModels.CApproveViewModel>
@using WantTask.ViewModels;
   
<head>

</head>


<body>

    <div class="table-responsive mb-4">
        <table id="selAllTable" class="table table-hover table align-middle datatable dt-responsive table-check nowrap" style="border-collapse: collapse; border-spacing: 0 8px; width: 100%;">
            <thead>
                <tr>
                    <th style="width: 30px;">序號</th>
                    <th style="width: 100px;">投遞任務</th>
                    <th style="width: 80px;">申請人名稱</th>
                    <th style="width: 100px;">履歷內容</th>
                   @* <th style="width: 50px;">語言</th>*@
                    <th style="width: 50px;">證照</th>
                    <th style="width: 50px;">技能</th>
                    <th style="width: 50px;">查看</th>
                    <th style="width: 50px;">是否錄取</th>

                </tr>
            </thead>
            <tbody>
                @{
                    int count = 0;
                    List<string> displayedCertificateItems = new List<string>();
                    List<string> displayedSkillItems = new List<string>();

                    //CApproveViewModel currentResume = null; // 用於跟蹤當前處理的履歷

                    foreach (var item in Model)
                    {
                        int maxDisplayLength = 10; // 設定要顯示的最大字數
                        string autobiography = item.Autobiography;

                        if (autobiography.Length > maxDisplayLength)
                        {
                            autobiography = autobiography.Substring(0, maxDisplayLength) + " ..."; // 截斷字串
                        }
                        count++;

                        // 檢查當前履歷是否與前一個相同
                        //if (currentResume == null || currentResume.ResumeId != item.ResumeId)
                        //{
                        //    // 如果是不同的履歷，則顯示新的行
                        //    count++;
                        //    currentResume = item; // 更新當前履歷
                        //}

                        //9/4
                        //bool hasCertificates = item.CertificateNames != null && item.CertificateNames.Any();
                        //bool hasSkills = item.SkillNames != null && item.SkillNames.Any();

                        //// 如果沒有證照和技能，則跳過這個迴圈迭代
                        //if (!hasCertificates && !hasSkills)
                        //{
                        //    continue;
                        //}


                        <tr data-id="1">
                            <td data-field="id">@count</td>
                            <td data-field="name"> @Html.DisplayFor(modelItem => item.TaskTitle)</td>
                            <td data-field="name"> @Html.DisplayFor(modelItem => item.Name)</td>
                            <td data-field="age">@Html.DisplayFor(modelItem => autobiography)</td>
                            @*<td data-field="gender">@Html.DisplayFor(modelItem => taskDetail)</td>*@
                            <td>
                                <div class="d-flex gap-2">
                                    @*@if (item.CertificateNames != null)
                                    {
                                        foreach (var cert in item.CertificateNames.Distinct())
                                    {
                                    <a href="#" class="badge badge-soft-primary">@Html.DisplayFor(modelItem => item.CertificateName)</a>                                         
                                    }
                                    }*@

                                    @*9/4*@
                                    @if (item.CertificateNames != null)
                                    {
                                        var distinctCertificates = item.CertificateNames.Distinct();
                                        foreach (var cert in distinctCertificates)
                                        {
                                            <a href="#" class="badge badge-soft-primary">@cert</a>
                                        }
                                    }

                                    @*@if (item.CertificateNames != null)
                                    {
                                        string certificateNames = string.Join(", ", item.CertificateNames.Distinct());
                                        <a href="#" class="badge badge-soft-primary">@certificateNames</a>
                                    }*@

                                   @* @if (item.CertificateNames != null)
                                    {
                                        foreach (var certificateName in item.CertificateNames.Distinct())
                                        {
                                            if (!displayedCertificateItems.Contains(certificateName))
                                            {
                                                displayedCertificateItems.Add(certificateName);
                                                <a href="#" class="badge badge-soft-primary">@certificateName</a>
                                            }
                                        }
                                    }*@

                                   @* @if (hasCertificates)
                                    {
                                        <a href="#" class="badge badge-soft-primary">@string.Join(", ", item.CertificateNames.Distinct())</a>
                                    }*@

                                    </div>
                            </td>
                            <td>
                                <div class="d-flex gap-2">
                                    @*@if (item.SkillNames != null)
                                    {
                                        foreach (var skill in item.SkillNames.Distinct())
                                    {
                                    <a href="#" class="badge badge-soft-primary">@Html.DisplayFor(modelItem => item.SkillName)</a>                                        
                                    }
                                    }*@

                                    @if (item.SkillNames != null)
                                    {
                                        var distinctSkills = item.SkillNames.Distinct();
                                        foreach (var skill in distinctSkills)
                                        {
                                            <a href="#" class="badge badge-soft-primary">@skill</a>
                                        }
                                    }
                                   @* @if (item.SkillNames != null)
                                    {
                                        string skillNames = string.Join(", ", item.SkillNames.Distinct());
                                        <a href="#" class="badge badge-soft-primary">@skillNames</a>
                                    }*@
                                    @*@if (item.SkillNames != null)
                                    {
                                        foreach (var skillName in item.SkillNames.Distinct())
                                        {
                                            if (!displayedSkillItems.Contains(skillName))
                                            {
                                                displayedSkillItems.Add(skillName);
                                                <a href="#" class="badge badge-soft-primary">@skillName</a>
                                            }
                                        }
                                    }*@

                                    @*@if (hasSkills)
                                    {
                                        <a href="#" class="badge badge-soft-primary">@string.Join(", ", item.SkillNames.Distinct())</a>
                                    }*@

                                </div>
                            </td>
                            <td>
                                <a title="Edit" href="@Url.Content("~/backstage/ResumeUneditable")?id=@item.ResumeId">
                                    @*<i class="fas fa-pencil-alt"></i>*@
                                    <img src="~/backstage1/img/magnifying.png" alt="查看" style="height: 25px; width: 25px;">
                                </a>
                            </td>
                            
                                @*<div class="d-flex flex-wrap gap-3 my-3">
                                    <div class="btn-group" role="group" aria-label="Basic example">
                                        @*<button type="button" class="btn btn-outline-secondary" id="yes">錄取</button>
                                <button type="button" class="btn btn-outline-secondary" id="no">婉拒</button>*@
                                       @* @Html.ActionLink("錄取", "Accept","BackstageTask", new {id=item.CaseId}, new { @class = "btn btn-outline-secondary" ,style="color:#528EAF"})
                                        @Html.ActionLink("婉拒", "Refuse","BackstageTask", new {id=item.CaseId}, new { @class = "btn btn-outline-secondary" ,style="color:#528EAF"})
                                    </div>
                                </div>*@
                            <td>
                                <a href="@Url.Content("~/BackstageTask/Accept")?id=@item.CaseId">
                                        @*<i class="fas fa-pencil-alt"></i>*@
                                    <img src="~/backstage1/img/check.png" alt="錄取" style="height: 25px; width: 25px;">
                                </a>

                                <a href="@Url.Content("~/BackstageTask/Refuse")?id=@item.CaseId">
                                    @*<i class="fas fa-pencil-alt"></i>*@
                                    <img src="~/backstage1/img/close.png" alt="婉拒" style="height: 23px; width: 23px;">
                                </a>
                            </td>                           
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</body>


@section Scripts{
    <script>


    </script>

}
